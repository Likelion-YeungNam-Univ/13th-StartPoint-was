name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE: ghcr.io/likelion-yeungnam-univ/startpoint-was:latest

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE }}
          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        env:
          GHCR_USER: ${{ github.actor }}
          GHCR_PAT: ${{ secrets.CR_PAT }}
          IMAGE: ${{ env.IMAGE }}
          ENV_FILE:  /home/ubuntu/set-env.sh
          NAME: startpoint-was
          HOST_PORT: 80
          APP_PORT: 8080
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            IMAGE="$IMAGE" NAME="$NAME" HOST_PORT="$HOST_PORT" APP_PORT="$APP_PORT" \
            ENV_FILE="$ENV_FILE" GHCR_USER="$GHCR_USER" GHCR_PAT="$GHCR_PAT" \
            'bash -s' << 'EOF'
          set -e
          
          echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USER" --password-stdin || true
          
          if    [ ! -f "$ENV_FILE" ]; then
            echo "ENV_FILE not found: $ENV_FILE" >&2
            exit 1
          fi
          if grep -q '^export ' "$ENV_FILE"; then
            sed -E 's/^export[[:space:]]+//' "$ENV_FILE" > /tmp/.env
          else
            cp "$ENV_FILE" /tmp/.env
          fi

          docker pull "$IMAGE"
          docker stop "$NAME" || true
          docker rm "$NAME" || true
          
          docker run -d --name "$NAME" \
          --restart unless-stopped \
          --env-file /tmp/.env \
          -p "$HOST_PORT":"$APP_PORT" \
          "$IMAGE"

          rm -f /tmp/.env
          EOF